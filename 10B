#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

vector<vector<int>> graph;
vector<int> minE;
vector<int> x, y;
vector<bool> used;

/*
 * Сам алгоритм имеет очень простой вид. Искомый минимальный остов строится постепенно, добавлением в него рёбер по одному. 
 * Изначально остов полагается состоящим из единственной вершины (её можно выбрать произвольно). 
 * Затем выбирается ребро минимального веса, исходящее из этой вершины, и добавляется в минимальный остов. 
 * После этого остов содержит уже две вершины, и теперь ищется и добавляется ребро минимального веса, имеющее один конец в одной из двух выбранных вершин, 
 * а другой — наоборот, во всех остальных, кроме этих двух. И так далее, т.е. всякий раз ищется минимальное по весу ребро, один конец которого — уже взятая в 
 * остов вершина, а другой конец — ещё не взятая, и это ребро добавляется в остов (если таких рёбер несколько, можно взять любое). Этот процесс повторяется до тех пор, 
 * пока остов не станет содержать все вершины (или, что то же самое, n-1 ребро).

В итоге будет построен остов, являющийся минимальным. 
 Если граф был изначально не связен, то остов найден не будет (количество выбранных рёбер останется меньше n-1).
 */
const int INF = INT_MAX;

int main() {
    ifstream  in("spantree.in");
    ofstream  out("spantree.out");

    // cout.precision(/*number*/);  // задает количество знаков после десятичной точки
    out.precision(10);

    int n;
     in >> n;

// выделяем память для всех массивов

    graph.resize(n, vector<int>(n));
    minE.resize(n, INF);
    x.resize(n);
    y.resize(n);
    used.resize(n);

    double minPath = 0;

    //записываем точки
    for (int i = 0; i < n; i++) {
         in >> x[i] >> y[i];
    }
// вычисляем значения ребер графа
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            graph[i][j] = (x[i] - x[j]) * (x[i] - x[j]) +
                          (y[i] - y[j]) * (y[i] - y[j]);
        }
    }

    minE[0] = 0;
    for (int i = 0; i < n; i++) {
        int v = -1;

        for (int j = 0; j < n; j++)
            if (!used[j] && (v == -1 || minE[j] < minE[v]))
                v = j;

        used[v] = true;
        for (int j = 0; j < n; j++) {
            if (!used[j] && graph[v][j] < minE[j] && v != j)
                minE[j] = graph[v][j];
        }
    }

    for (int i = 0; i < n; i++) {
        minPath  += sqrt(minE[i]);
    }

     out << minPath ;
}
