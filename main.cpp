#include <iostream>

using namespace std;

/*
    Битовые операции

   |  (Побитовое ИЛИ (OR)),
   & (Побитовое И (AND)),
   ^ (Исключающее ИЛИ (XOR)),
    ~ (Побитовое отрицание (NOT)),
   << (Побитовый сдвиг влево),
   >> (Побитовый сдвиг вправо).
    */


int main() {


//  |  (Побитовое ИЛИ (OR)),
    int A = 38, B = 53;
    int C = A | B;
    cout << C << " or " << endl;


//************************************************************************

//& (Побитовое И (AND)),

    int D = A & B;
    cout << D << " And" << endl;
/*
 С помощью побитового оператора И можно проверить, является ли число четным или нечетным.
 Для целых чисел, если младший бит равен 1, то число нечетное
 (основываясь на преобразовании двоичных чисел в десятичные).
 Зачем это нужно, если можно просто использовать %2? На моем компьютере, например,
 &1 выполняется на 66% быстрее.
 */

//************************************************************************

// ^ (Исключающее ИЛИ (XOR)),

    A = 138;
    B = 43;
    int E = A ^ B;
    cout << E << " XOR" << endl;
/*
 С помощью ^ можно поменять значения двух переменных (имеющих одинаковый тип данных)
 без использования временной переменной.
 */

//************************************************************************

//~ (Побитовое отрицание (NOT)),

    A = 52;
    int F = ~A;
    cout << F << "  not" << endl;

    /*
     * Дополнительный код
     */

//************************************************************************

//  << (Побитовый сдвиг влево),

    A = 5 ;
    int G = A<<5;
    cout << G << "  <<" << endl;
    G = A>>10;
    cout << G << "  >>" << endl;

    return 0;
}
